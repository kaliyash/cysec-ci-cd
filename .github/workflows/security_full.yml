name: Security CI

on: [push, pull_request]

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
         python-version: '3.10'

    - name: Install Bandit and Semgrep
      run: |
        pip install bandit semgrep requests

    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

    - name: Add /usr/local/bin to PATH for Trivy
      run: echo "/usr/local/bin" >> $GITHUB_PATH

    - name: Install Grype
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Add /usr/local/bin to PATH for Grype
      run: echo "/usr/local/bin" >> $GITHUB_PATH

    - name: Create output directories
      run: |
        mkdir -p scans/code
        mkdir -p scans/image

    - name: Run Bandit scan
      run: |
        bandit -r . -f json -o scans/code/bandit.json || echo '{}' > scans/code/bandit.json
        test -f scans/code/bandit.json || echo '{}' > scans/code/bandit.json

    - name: Run Semgrep scan
      run: |
        semgrep scan --config=auto --json --output=scans/code/semgrep.json || echo '{"results":[]}' > scans/code/semgrep.json
        test -f scans/code/semgrep.json || echo '{"results":[]}' > scans/code/semgrep.json

    - name: Build Docker image
      run: docker build -t insecure-app .

    - name: Run Trivy scan
      run: |
        trivy image -f json -o scans/image/trivy.json insecure-app || echo '{"Results":[]}' > scans/image/trivy.json
        test -f scans/image/trivy.json || echo '{"Results":[]}' > scans/image/trivy.json

    - name: Run Grype scan
      run: |
        grype insecure-app -o json > scans/image/grype.json || echo '{"matches":[]}' > scans/image/grype.json
        test -f scans/image/grype.json || echo '{"matches":[]}' > scans/image/grype.json

    - name: Verify scan output files
      run: ls -lR scans

    - name: Store scan results in SQLite DB
      run: python3 store_scan_results.py

    - name: Upload scan results database
      uses: actions/upload-artifact@v4
      with:
        name: scan-results-db
        path: scan_results.db

    - name: Commit and push scan results to repo
      env:
        CUSTOM_TOKEN: ${{ secrets.CYBERSEC_CI_CD_TOKEN }}
      run: |
        git config user.name "Auto Commit Bot"
        git config user.email "bot@ci-cd.local"
        git credential-cache exit || true
        git remote set-url origin https://x-access-token:${CUSTOM_TOKEN}@github.com/${{ github.repository }}
        git add scans/code/bandit.json scans/code/semgrep.json scans/image/trivy.json scans/image/grype.json
        git commit -m "Add latest scan results [skip ci]" || echo "No changes to commit"
        GIT_TERMINAL_PROMPT=0 git push origin HEAD:${{ github.ref_name }}

    - name: Upload raw scan JSON results
      uses: actions/upload-artifact@v4
      with:
        name: raw-scan-results
        path: |
          scans/code/bandit.json
          scans/code/semgrep.json
          scans/image/trivy.json
          scans/image/grype.json

    - name: Send Discord alert if vulnerabilities found
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        python3 - <<'EOF'
        import json
        import os
        import sys
        import requests

        def load_json(path):
            if os.path.exists(path):
                try:
                    with open(path, 'r') as f:
                        content = f.read().strip()
                        if not content:
                            return None
                        return json.loads(content)
                except json.JSONDecodeError:
                    print(f"Warning: JSON decode error in {path}")
                    return None
            return None

        def count_bandit_issues(data):
            if not data or 'results' not in data:
                return 0
            return len(data['results'])

        def count_semgrep_issues(data):
            if not data or 'results' not in data:
                return 0
            return len(data['results'])

        def count_trivy_issues(data):
            if not data or 'Results' not in data:
                return 0
            count = 0
            for result in data['Results']:
                vulnerabilities = result.get('Vulnerabilities')
                if vulnerabilities:
                    count += len(vulnerabilities)
            return count

        def count_grype_issues(data):
            if not data or 'matches' not in data:
                return 0
            return len(data['matches'])

        bandit_data = load_json("scans/code/bandit.json")
        semgrep_data = load_json("scans/code/semgrep.json")
        trivy_data = load_json("scans/image/trivy.json")
        grype_data = load_json("scans/image/grype.json")

        bandit_issues = count_bandit_issues(bandit_data)
        semgrep_issues = count_semgrep_issues(semgrep_data)
        trivy_issues = count_trivy_issues(trivy_data)
        grype_issues = count_grype_issues(grype_data)

        total_issues = bandit_issues + semgrep_issues + trivy_issues + grype_issues

        if total_issues == 0:
            print("No vulnerabilities found by any tool. No alert sent.")
            sys.exit(0)

        message = (
            f"âš  Security Scan Alert:\n"
            f"Bandit issues: {bandit_issues}\n"
            f"Semgrep issues: {semgrep_issues}\n"
            f"Trivy issues: {trivy_issues}\n"
            f"Grype issues: {grype_issues}\n"
            f"Total issues: {total_issues}"
        )

        webhook_url = os.getenv("DISCORD_WEBHOOK_URL")
        if not webhook_url:
            print("No Discord webhook URL set. Exiting.")
            sys.exit(1)

        payload = {"content": message}
        response = requests.post(webhook_url, json=payload)

        if response.status_code == 204:
            print("Discord alert sent successfully.")
        else:
            print(f"Failed to send Discord alert: {response.status_code}, {response.text}")
            sys.exit(1)
        EOF
