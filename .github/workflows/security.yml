name: Security CI

on: [push, pull_request]

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Bandit and Semgrep
      run: |
        pip install bandit semgrep requests

    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh

    - name: Install Grype
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh

    - name: Create output directories
      run: |
        mkdir -p scans/code
        mkdir -p scans/image

    - name: Run Bandit scan
      run: bandit -r . -f json -o scans/code/bandit.json || true

    - name: Run Semgrep scan
      run: semgrep scan --config=auto --json --output=scans/code/semgrep.json || true

    - name: Build Docker image
      run: docker build -t insecure-app .

    - name: Run Trivy scan
      run: ./trivy image -f json -o scans/image/trivy.json insecure-app || true

    - name: Run Grype scan
      run: ./grype insecure-app -o json > scans/image/grype.json || true

    - name: Store scan results in SQLite DB
      run: python3 store_scan_results.py

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      with:
        name: scan-results
        path: scans/

    - name: Send Discord alert if vulnerabilities found
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        python3 - <<'EOF'
        import json
        import os
        import sys
        import requests

        def load_json(path):
            if os.path.exists(path):
                with open(path, 'r') as f:
                    return json.load(f)
            return None

        def count_bandit_issues(data):
            if not data or 'results' not in data:
                return 0
            return len(data['results'])

        def count_semgrep_issues(data):
            if not data or 'results' not in data:
                return 0
            return len(data['results'])

        bandit_path = "scans/code/bandit.json"
        semgrep_path = "scans/code/semgrep.json"

        bandit_data = load_json(bandit_path)
        semgrep_data = load_json(semgrep_path)

        bandit_issues = count_bandit_issues(bandit_data)
        semgrep_issues = count_semgrep_issues(semgrep_data)

        total_issues = bandit_issues + semgrep_issues

        if total_issues == 0:
            print("No vulnerabilities found by Bandit or Semgrep. No alert sent.")
            sys.exit(0)

        message = f"⚠️ Security Scan Alert:\nBandit issues: {bandit_issues}\nSemgrep issues: {semgrep_issues}\nTotal issues: {total_issues}"

        webhook_url = os.getenv("DISCORD_WEBHOOK_URL")
        if not webhook_url:
            print("No Discord webhook URL set. Exiting.")
            sys.exit(1)

        payload = {"content": message}
        response = requests.post(webhook_url, json=payload)
        if response.status_code == 204:
            print("Discord alert sent successfully.")
        else:
            print(f"Failed to send Discord alert: {response.status_code}, {response.text}")
            sys.exit(1)
        EOF
